trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
# =====================
# Build Stage
# =====================
- stage: Build
  jobs:
  - job: BuildMicroservices
    displayName: Start All Microservices
    steps:
    - script: |
        cd auth-micro-backend
        npm install
        npm run start
      displayName: 'Build Auth Service'
    - script: |
        cd vital-signs-microservice
        npm install
        npm run dev
      displayName: 'Build Vital Signs Service'

  - job: BuildMicrofrontends
    displayName: Build All Microfrontends
    steps:
    - script: |
        cd auth-micro-frontend
        npm install
        npm run start-mf
      displayName: 'Build Auth Microfrontend'
    - script: |
        cd vital-signs-micro-frontend
        npm install
        npm run start-mf
      displayName: 'Build Vital Signs Microfrontend'

# =====================
# Archive and Publish Artifacts
# =====================
- stage: PublishArtifacts
  dependsOn: Build
  jobs:
  - job: ArchiveAndPublish
    displayName: Archive and Publish Build Artifacts
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive Auth Service'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/auth-micro-backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/auth-micro-backend.zip'
    - task: ArchiveFiles@2
      displayName: 'Archive Vital Signs Service'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/vital-signs-microservice'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/vital-signs-microservice.zip'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/auth-micro-frontend/dist'
        archiveFile: '$(Build.ArtifactStagingDirectory)/auth-micro-frontend.zip'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/vital-signs-micro-frontend/dist'
        archiveFile: '$(Build.ArtifactStagingDirectory)/vital-signs-micro-frontend.zip'
  - job: PublishArtifacts
    displayName: Publish Artifacts
    steps:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish All Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'


# =====================
# Deploy to Dev Env Stage
# =====================
- stage: DeployToDev
  displayName: Deploy to Development Environment
  dependsOn: Deliver
  jobs:
  - job: DeployToDev
    displayName: Deploy to Dev Environment
    steps:
    - script: echo "Deploying to Dev Environment"
      displayName: 'Mock Deploy to Dev'
    - script: echo "Starting the application in Dev Environment"
      displayName: 'Launch the Application'

# =====================
# Deploy to QAT Env Stage
# =====================
- stage: DeployToQAT
  displayName: Deploy to QAT Environment
  dependsOn: DeployToDev
  jobs:
  - job: DeployToQAT
    displayName: Deploy to QAT Environment
    steps:
    - script: echo "Deploying to QAT Environment"
      displayName: 'Mock Deploy to QAT'
    - script: echo "Starting the application in QAT Environment"
      displayName: 'Launch the Application'

# =====================
# Deploy to Staging Env Stage
# =====================
- stage: DeployToStaging
  displayName: Deploy to Staging Environment
  dependsOn: DeployToQAT
  jobs:
  - job: DeployToStaging
    displayName: Deploy to Staging Environment
    steps:
    - script: echo "Deploying to Staging Environment"
      displayName: 'Mock Deploy to Staging'
    - script: echo "Starting the application in Staging Environment"
      displayName: 'Launch the Application'

# =====================
# Deploy to Production Env Stage
# =====================
- stage: DeployToProduction
  displayName: Deploy to Production Environment
  dependsOn: DeployToStaging
  jobs:
  - job: DeployToProduction
    displayName: Deploy to Production Environment
    steps:
    - script: echo "Deploying to Production Environment"
      displayName: 'Mock Deploy to Production'
    - script: echo "Starting the application in Production Environment"
      displayName: 'Launch the Application'
